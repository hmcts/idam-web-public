import java.util.stream.Collectors

plugins {
  id 'java'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.7.RELEASE' apply false
  id 'org.owasp.dependencycheck' version '3.1.2'
  id 'org.sonarqube' version '2.6.2'
  id 'org.springframework.boot' version '2.1.3.RELEASE' apply false
  id 'com.gorylenko.gradle-git-properties' version '1.4.21'
  id "info.solidsoft.pitest" version "1.3.0"
  id 'pmd'
}

gitProperties {
  // Change date format in git.properties file.
  dateFormat = "yyyy-MM-dd HH:mm:ssZ"
}

allprojects  {
  apply plugin: 'java'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'war'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'pmd'

  group = 'uk.gov.hmcts.reform.idam'
  description = 'idam-web-public'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  def idamBomVersion = '1.5.1'

  dependencyManagement {
    imports {
      mavenBom "uk.gov.hmcts.reform.idam:idam-bom:${idamBomVersion}"
    }
  }

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
       url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    jcenter()
  }

  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'

    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  dependencies {
    compile group: 'uk.gov.hmcts.reform.idam', name: 'idam-api-spec'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    compile group: 'org.springframework.security', name: 'spring-security-taglibs'
    compile group: 'org.projectlombok', name: 'lombok'
    compile group: 'javax.servlet', name: 'jstl'
    compile group: 'javax.json', name: 'javax.json-api'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt'
    compile group: 'org.apache.httpcomponents', name: 'httpclient'
    compile group: 'org.apache.httpcomponents', name: 'httpcore'
    compile group: 'org.apache.commons', name: 'commons-text'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-web'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter'
    compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback'
    compile group: 'org.pitest', name: 'pitest', version: '1.3.2'
    compile group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.3.0'
    compile group: 'org.codehaus.sonar-plugins', name:'sonar-pitest-plugin', version: '0.5'
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper'

    // TODO mockito version is not correctly resolved from IdAM BOM. Remove version when this is fixed
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.8.9'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-devtools'
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    testCompile group: 'org.springframework.security', name: 'spring-security-test'
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  bootRun {
    systemProperties = System.properties
  }

  task smoke(dependsOn: ':codeceptSmoke') {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests against a running instance'
  }

  task functional(dependsOn: [':codeceptFunctional', ':pa11y']) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests against a running instance'
  }

  task yarnInstall(type: Exec) {
    workingDir '.'
    commandLine 'yarn', 'install'
  }

  task pa11yInstall(type: Exec) {
    workingDir '.'
    commandLine 'npm', 'install', 'pa11y'
  }

  task notifyClientInstall(type: Exec) {
    workingDir '.'
    commandLine 'npm', 'install', 'notifications-node-client'
  }

  task codeceptSmoke(type: Exec, dependsOn: ':yarnInstall') {
    workingDir '.'
    commandLine 'node_modules/codeceptjs/bin/codecept.js', 'run', '--grep', '@smoke', '--verbose', '--reporter', 'mocha-multi'
  }

  task codeceptFunctional(type: Exec, dependsOn: [':yarnInstall', ':notifyClientInstall']) {
    workingDir '.'
    commandLine 'node_modules/codeceptjs/bin/codecept.js', 'run', '--grep', '@functional', '--verbose', '--reporter', 'mocha-multi'
  }

  task pa11y(type: Exec, dependsOn: 'pa11yInstall') {
    workingDir '.'
    commandLine './node_modules/.bin/pa11y', '--config', 'pa11y.conf.js', System.getenv('TEST_URL')
  }
}

project.tasks['sonarqube'].dependsOn test

def listFiles(String pattern) {
    return new FileNameFinder()
        .getFileNames("${project.rootDir}", pattern)
        .stream()
        .collect(Collectors.joining(","))
}

sonarqube {
  properties {
    property "sonar.projectName", "SIDAM-WEB-PUBLIC"
    property "sonar.jacoco.reportPath", "${listFiles('**/test.exec')}"
    property "sonar.exclusions", "**/uk/gov/hmcts/reform/idam/web/config/properties/*.java," +
            "**/uk/gov/hmcts/reform/idam/web/model/*.java," +
            "**/uk/gov/hmcts/reform/idam/web/helper/MvcKeys.java," +
            "**/uk/gov/hmcts/reform/idam/web/Application.java," +
            "**/*Exception.java"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  ruleSetFiles = files("$project.rootDir/rules-pmd.xml")
  reportsDir = file("$project.buildDir/reports/pmd")
}

pitest {
  targetClasses = ['uk.gov.hmcts.reform.idam.*']
  threads = 10
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  outputFormats = ['XML', 'HTML']
  timestampedReports = true
  mutationThreshold = 80
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination = file("${buildDir}/reports/jacoco")
  }

  additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(sourceSets.main.allSource.srcDirs)
  classDirectories = files(sourceSets.main.output)
  println 'class directories: ' + classDirectories.asPath
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it,
        exclude: ['**/uk/gov/hmcts/reform/idam/web/config/properties/*',
                  '**/uk/gov/hmcts/reform/idam/web/model/*',
                  '**/uk/gov/hmcts/reform/idam/web/helper/MvcKeys**',
                  '**/uk/gov/hmcts/reform/idam/web/Application**',
                  '**/*Exception**'])
    })
  }
}

test.finalizedBy jacocoTestReport

bootRun {
  systemProperties = System.properties
}

