#!groovy

@Library("Infrastructure")

def type = "java"

def product = "idam"

def component = "web-public"

env.NONPROD_ENVIRONMENT_NAME = 'idam-aat'
env.PROD_ENVIRONMENT_NAME = 'idam-prod'
env.DEMO_ENVIRONMENT_NAME = 'idam-demo'
env.PREVIEW_ENVIRONMENT_NAME = 'idam-preview'
env.PERFTEST_ENVIRONMENT_NAME = 'idam-perftest'
env.ITHC_ENVIRONMENT_NAME = 'idam-ithc'
env.NO_SKIP_IMG_BUILD = 'true'

def secrets = [
    'idam-${env}': [
        secret('smoke-test-user-username', 'SMOKE_TEST_USER_USERNAME'),
        secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
        secret('notify-api-key', 'NOTIFY_API_KEY'),
        secret('EJUDICIARY-TEST-USER-PASSWORD', 'EJUDICIARY_TEST_USER_PASSWORD'),
        secret('MOJ-TEST-USER-PASSWORD', 'MOJ_TEST_USER_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

def branchesToSync = ['demo', 'perftest', 'ithc']

withPipeline(type, product, component) {
    loadVaultSecrets(secrets)
    enableSlackNotifications('#idam_tech')
    enableAksStagingDeployment()
    disableLegacyDeployment()
    syncBranchesWithMaster(branchesToSync)

    // AKS Callbacks
    before('akschartsinstall') {
        env.PREVIEW_ENVIRONMENT_NAME = 'preview'
        env.NONPROD_ENVIRONMENT_NAME = 'preview'
        println """\
                Using PREVIEW_ENVIRONMENT_NAME: ${env.PREVIEW_ENVIRONMENT_NAME}
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}""".stripIndent()
    }

    before('smoketest:idam-preview') {
        env.PREVIEW_ENVIRONMENT_NAME = 'preview'
        env.NONPROD_ENVIRONMENT_NAME = 'preview'
        env.IDAMAPI = "https://idam-api.preview.platform.hmcts.net"
        env.TESTING_SUPPORT_API_URL = "https://idam-testing-support-api.preview.platform.hmcts.net"
        println """\
                Using PREVIEW_ENVIRONMENT_NAME: ${env.PREVIEW_ENVIRONMENT_NAME}
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}
                Using IDAMAPI: ${env.IDAMAPI}""".stripIndent()
    }

    before('functionalTest:idam-preview') {
        env.PREVIEW_ENVIRONMENT_NAME = 'preview'
        env.NONPROD_ENVIRONMENT_NAME = 'preview'
        env.IDAMAPI = "https://idam-api.preview.platform.hmcts.net"
        env.TESTING_SUPPORT_API_URL = "https://idam-testing-support-api.preview.platform.hmcts.net"
        println """\
                Using PREVIEW_ENVIRONMENT_NAME: ${env.PREVIEW_ENVIRONMENT_NAME}
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}
                Using IDAMAPI: ${env.IDAMAPI}""".stripIndent()
    }

    before('smoketest:idam-aat') {
        env.NONPROD_ENVIRONMENT_NAME = 'aat'
        env.IDAMAPI = "https://idam-api.aat.platform.hmcts.net"
        println """\
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}
                Using IDAMAPI: ${env.IDAMAPI}""".stripIndent()
    }

    before('functionalTest:idam-aat') {
        env.NONPROD_ENVIRONMENT_NAME = 'aat'
        env.RPE_AUTH_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
        env.REF_DATA_URL = "http://rd-professional-api-aat.service.core-compute-aat.internal"
        env.IDAMAPI = "https://idam-api.aat.platform.hmcts.net"
        env.TESTING_SUPPORT_API_URL = 'https://idam-testing-support-api.aat.platform.hmcts.net'
        env.TESTS_FOR_ACCESSIBILITY = true
        env.WAIT_FOR_ACTION_TIMEOUT = 2000
        println """\
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}
                Using RPE_AUTH_URL: ${env.RPE_AUTH_URL}
                Using REF_DATA_URL: ${env.REF_DATA_URL}
                Using IDAMAPI: ${env.IDAMAPI}
                Using TESTING_SUPPORT_API_URL: ${env.TESTING_SUPPORT_API_URL}""".stripIndent()
    }

    before('buildinfra:idam-ithc') {
        env.ITHC_ENVIRONMENT_NAME = 'ithc'
        println """\
                Using ITHC_ENVIRONMENT_NAME: ${env.ITHC_ENVIRONMENT_NAME}""".stripIndent()
    }

    afterSuccess('akschartsinstall') {
        env.PREVIEW_ENVIRONMENT_NAME = 'idam-preview'
        env.NONPROD_ENVIRONMENT_NAME = 'idam-aat'
        println """\
                Using PREVIEW_ENVIRONMENT_NAME: ${env.PREVIEW_ENVIRONMENT_NAME}
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}""".stripIndent()
    }

    afterSuccess('smoketest:idam-preview') {
        env.PREVIEW_ENVIRONMENT_NAME = 'idam-preview'
        env.NONPROD_ENVIRONMENT_NAME = 'idam-aat'
        println """\
                Using PREVIEW_ENVIRONMENT_NAME: ${env.PREVIEW_ENVIRONMENT_NAME}
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}""".stripIndent()
    }

    afterSuccess('functionalTest:idam-preview') {
        env.PREVIEW_ENVIRONMENT_NAME = 'idam-preview'
        env.NONPROD_ENVIRONMENT_NAME = 'idam-aat'
        println """\
                Using PREVIEW_ENVIRONMENT_NAME: ${env.PREVIEW_ENVIRONMENT_NAME}
                Using NONPROD_ENVIRONMENT_NAME: ${env.NONPROD_ENVIRONMENT_NAME}""".stripIndent()
    }
    // End AKS Callbacks

    afterSuccess('test') {
        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "build/reports/jacoco",
            reportFiles          : "index.html",
            reportName           : "IdAM Web Public Code Coverage Report"
        ]

    }

    afterSuccess('smoketest:idam-preview') {
        archiveArtifacts '**/build/test-results/**/*'

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "output",
            reportFiles          : "idam-web-public-e2e-result.html",
            reportName           : "IDAM Web Public E2E smoke tests result"
        ]
    }

    afterSuccess('smoketest:idam-aat') {
        archiveArtifacts '**/build/test-results/**/*'

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "output",
            reportFiles          : "idam-web-public-e2e-result.html",
            reportName           : "IDAM Web Public E2E smoke tests result"
        ]
    }

    afterSuccess('functionalTest:idam-preview') {
        archiveArtifacts '**/build/test-results/**/*'
        archiveArtifacts '**/functional-output/**/*'

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "output",
            reportFiles          : "idam-web-public-e2e-result.html",
            reportName           : "IDAM Web Public E2E functional tests result"
        ]
    }

    afterSuccess('functionalTest:idam-aat') {
        env.TESTS_FOR_ACCESSIBILITY = false
        env.WAIT_FOR_ACTION_TIMEOUT = 500
        archiveArtifacts '**/build/test-results/**/*'
        archiveArtifacts '**/functional-output/**/*'

        publishHTML target: [
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "output",
            reportFiles          : "idam-web-public-e2e-result.html",
            reportName           : "IDAM Web Public E2E functional tests result"
        ]
    }
}