#!groovy

properties([
    pipelineTriggers([cron('070 07 * * 1-5')]),

    parameters([
        string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
        string(name: 'URL_TO_TEST', defaultValue: 'https://idam-web-public.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
        string(name: 'API_URL_TO_TEST', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'The API URL you want to run these tests against '),
        string(name: 'TESTING_SUPPORT_API_URL', defaultValue: 'https://idam-testing-support-api.aat.platform.hmcts.net', description: 'The testing support api URL you want to run these tests against'),
        string(name: 'RPE_AUTH_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal', description: 'The URL for s2s token authentication'),
        string(name: 'REF_DATA_URL', defaultValue: 'http://rd-professional-api-aat.service.core-compute-aat.internal', description: 'The URL for calls to Ref Data (PRD)'),
        string(name: 'WAIT_FOR_ACTION_TIMEOUT', defaultValue: '2000', description: 'How long to wait after click, doubleClick or PressKey actions in ms')
    ])
])

@Library("Infrastructure") _
import uk.gov.hmcts.contino.GradleBuilder

GradleBuilder builder = new GradleBuilder(this, 'jenkins-library')

def type = "java"

def product = "idam"

def component = "web-public"

def secrets = [
    'idam-idam-aat': [
        secret('smoke-test-user-username', 'SMOKE_TEST_USER_USERNAME'),
        secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
        secret('notify-api-key', 'NOTIFY_API_KEY'),
        secret('EJUDICIARY-TEST-USER-PASSWORD', 'EJUDICIARY_TEST_USER_PASSWORD'),
        secret('MOJ-TEST-USER-PASSWORD', 'MOJ_TEST_USER_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

try {
    withNightlyPipeline(type, product, component) {
        env.TEST_URL = params.URL_TO_TEST
        env.IDAMAPI = params.API_URL_TO_TEST
        env.TESTING_SUPPORT_API_URL = params.TESTING_SUPPORT_API_URL
        env.RPE_AUTH_URL = params.RPE_AUTH_URL
        env.REF_DATA_URL = params.REF_DATA_URL
        env.WAIT_FOR_ACTION_TIMEOUT = params.WAIT_FOR_ACTION_TIMEOUT
        loadVaultSecrets(secrets)
        enableSecurityScan()
        enableMutationTest()
        enableFullFunctionalTest(200)
        enableCrossBrowserTest()
        enableFortifyScan('idam-idam-' + params.ENVIRONMENT)

        afterSuccess('fortify-scan') {
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
        }

        before('fullFunctionalTest') {
            env.TESTS_FOR_ACCESSIBILITY = true
        }

        afterSuccess('fullFunctionalTest') {
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
            env.TESTS_FOR_ACCESSIBILITY = false

            publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "output",
                reportFiles          : "idam-web-public-e2e-result.html",
                reportName           : "IDAM Web Public E2E functional tests result"
            ]
        }
    }
} catch (err) {
    node {
        onMaster() {
            def slackMessage = "Idam Web Public nightly pipeline failed:"
            slackMessage += "\nLink to build ${BUILD_ID}:\n${BUILD_URL}"
            slackSend(
                channel: "#idam-nightly-pipelines",
                color: 'danger',
                message: slackMessage)
        }
    }
    throw err
}