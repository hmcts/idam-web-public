import java.util.stream.Collectors

plugins {
  id 'java'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'org.sonarqube' version '2.6.2'
  id 'org.springframework.boot' version '2.6.4' apply false
  id 'com.gorylenko.gradle-git-properties' version '1.4.21'
  id "info.solidsoft.pitest" version "1.6.0"
  id 'application'
}

gitProperties {
  // Change date format in git.properties file.
  dateFormat = "yyyy-MM-dd HH:mm:ssZ"
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'war'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'application'

  group = 'uk.gov.hmcts.reform.idam'
  description = 'idam-web-public'

  sourceCompatibility = 11
  targetCompatibility = 11

  def idamBomVersion = '2.8.17'

  configurations.all {
    exclude group: "org.glassfish", module: "jakarta.el"
  }

  dependencyManagement {
    imports {
      mavenBom "com.github.hmcts:idam-bom:${idamBomVersion}"
    }
  }

  repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    jcenter()
  }

  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = "${project.rootDir}" + '//dependency-check-suppressions.xml'

    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
      nodeEnabled = false
      nodeAudit {
        enabled = false
        yarnEnabled = false
      }
    }
  }

  dependencies {
    implementation (group: 'com.github.hmcts', name: 'idam-api-spec') {
      exclude module: 'springfox-swagger2'
      exclude module: 'springfox-swagger-ui'
    }
    implementation group: 'commons-io', name: 'commons-io'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator'

    implementation group: 'org.springframework.security', name: 'spring-security-web'
    implementation group: 'org.springframework.security', name: 'spring-security-data'
    implementation group: 'org.springframework.security', name: 'spring-security-config'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis-reactive'
    implementation group: 'org.springframework.session', name: 'spring-session-data-redis', version: '2.2.4.RELEASE'
    implementation group: 'org.yaml', name: 'snakeyaml'

    implementation group: 'io.github.openfeign', name: 'feign-jackson'
    implementation group: 'io.github.openfeign', name: 'feign-okhttp'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-zuul', version: '2.2.10.RELEASE') {
      exclude(module: 'rxnetty-contexts')
      exclude(module: 'rxnetty-servo')
      exclude(module: 'rxnetty')
    }
    implementation group: 'com.netflix.servo', name: 'servo-core', version: '0.13.0'
    implementation group: 'org.springframework.security', name: 'spring-security-taglibs'

    compileOnly("org.projectlombok:lombok")

    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation group: 'javax.servlet', name: 'jstl'
    implementation group: 'javax.json', name: 'javax.json-api'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore'
    implementation group: 'org.apache.commons', name: 'commons-text'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-web'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback'
    implementation group: 'org.pitest', name: 'pitest', version: '1.6.6'
    implementation group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: '1.6.0'
    implementation group: 'org.owasp.encoder', name: 'encoder-jsp', version: '1.2.2'
    implementation (group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: '0.5') {
      exclude module: 'junit'
    }

    testCompile 'com.github.hmcts:fortify-client:1.1.0.patch-1.1:all'
    testCompile group: 'ch.qos.logback', name: 'logback-classic'
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testCompile('pl.pragmatists:JUnitParams:1.1.1') {
      exclude(module: 'junit')
    }

    testImplementation group: 'org.mockito', name: 'mockito-core'
    testImplementation group: 'org.springframework', name: 'spring-test'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-devtools'
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
      exclude(module: 'commons-logging')
    }
    testImplementation group: 'org.springframework.security', name: 'spring-security-test'
    testImplementation group: 'junit', name: 'junit'
  }

  task fortifyScan(type: JavaExec)  {
    classpath += sourceSets.test.runtimeClasspath
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
  }

  bootRun {
    systemProperties = System.properties
  }

  task smoke(dependsOn: ':codeceptSmoke') {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests against a running instance'
  }

  task functional(dependsOn: ':codeceptFunctional') {
    group = 'Delivery pipeline'
    description = 'Executes functional tests against a running instance'
  }

  task yarnInstall(type: Exec) {
    workingDir '.'
    commandLine 'yarn', 'install'
  }

  task notifyClientInstall(type: Exec) {
    workingDir '.'
    commandLine 'yarn', 'add', 'notifications-node-client'
  }

  task codeceptSmoke(type: Exec, dependsOn: ':yarnInstall') {
    workingDir '.'
    commandLine 'node_modules/codeceptjs/bin/codecept.js', 'run', '--grep', '@smoke', '--verbose', '--reporter', 'mocha-multi'
  }

  task codeceptFunctional(type: Exec, dependsOn :'yarnInstall') {
    workingDir '.'
    commandLine 'node_modules/codeceptjs/bin/codecept.js', 'run', '--grep', '@functional', '--verbose', '--reporter', 'mocha-multi'
  }

  task smokeSauce(dependsOn: ':codeceptSmokeSauce') {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests against a running instance'
  }

  task codeceptSmokeSauce(type: Exec, dependsOn: ':yarnInstall') {
    workingDir '.'
    commandLine 'node_modules/codeceptjs/bin/codecept.js', 'run', '--config', 'saucelabs.conf.js', '--steps', '--grep', '@smoke', '--verbose', '--debug', '--reporter', 'mochawesome'
  }

  task crossbrowser(dependsOn: ':codeceptFunctionalSauce') {
    group = 'Delivery pipeline'
    description = 'Execute cross browser tests on saucelabs'
  }

  task codeceptFunctionalSauce(type: Exec, dependsOn: ':yarnInstall') {
    workingDir '.'
    commandLine 'node_modules/codeceptjs/bin/codecept.js', 'run-multiple', '--all', '--config', 'saucelabs.conf.js', '--grep', '@crossbrowser', '--verbose', '--debug', '--steps', '--reporter', 'mocha-multi'
  }
  
}

project.tasks['sonarqube'].dependsOn test

def listFiles(String pattern) {
  return new FileNameFinder()
    .getFileNames("${project.rootDir}", pattern)
    .stream()
    .collect(Collectors.joining(","))
}

sonarqube {
  properties {
    property "sonar.projectName", "SIDAM-WEB-PUBLIC"
    property "sonar.exclusions", "**/uk/gov/hmcts/reform/idam/web/config/properties/*.java," +
      "**/uk/gov/hmcts/reform/idam/web/config/IdamWebMvcConfiguration.java," +
      "**/uk/gov/hmcts/reform/idam/web/config/SessionConfiguration.java," +
      "**/uk/gov/hmcts/reform/idam/web/config/AppConfiguration.java," +
      "**/uk/gov/hmcts/reform/idam/web/config/AppConfigurationSSO.java," +
      "**/uk/gov/hmcts/reform/idam/web/model/*.java," +
      "**/uk/gov/hmcts/reform/idam/web/helper/MvcKeys.java," +
      "**/uk/gov/hmcts/reform/idam/web/Application.java," +
      "**/*Exception.java"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

pitest {
  targetClasses = ['uk.gov.hmcts.reform.idam.*']
  threads = 10
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  outputFormats = ['XML', 'HTML']
  timestampedReports = true
  mutationThreshold = 80
}

jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination = file("${buildDir}/reports/jacoco")
  }
}

test.finalizedBy jacocoTestReport

bootRun {
  systemProperties = System.properties
}

